name: Performance Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run performance tests every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
      
    - name: Build project
      run: npm run build
      
    - name: Start application
      run: |
        npm run start:prod &
        sleep 10
        echo "Application started"
        
    - name: Install Artillery for load testing
      run: npm install -g artillery
      
    - name: Run load tests
      run: |
        artillery run --output load-test-report.json load-test-config.yml
        artillery report load-test-report.json --output load-test-report.html
        
    - name: Upload load test reports
      uses: actions/upload-artifact@v4
      with:
        name: load-test-reports
        path: |
          load-test-report.json
          load-test-report.html
        retention-days: 30

  memory-leak-testing:
    name: Memory Leak Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run memory leak tests
      run: |
        # Run tests with memory profiling
        node --expose-gc --max-old-space-size=512 node_modules/.bin/jest --runInBand --detectOpenHandles --forceExit
        
    - name: Generate memory report
      run: |
        echo "Memory usage analysis completed"
        # Add memory analysis commands here

  api-performance:
    name: API Performance Testing
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Start application
      run: |
        npm run start:prod &
        sleep 10
        
    - name: Run API performance tests
      run: |
        # Test GET /api/v1/example endpoint performance
        echo "Testing GET /api/v1/example performance..."
        for i in {1..100}; do
          curl -s -w "%{time_total}\n" -o /dev/null http://localhost:5001/api/v1/example?page=1&limit=10
        done | awk '{sum+=$1} END {print "Average response time:", sum/NR "s"}'
        
        # Test POST /api/v1/example endpoint performance
        echo "Testing POST /api/v1/example performance..."
        for i in {1..50}; do
          curl -s -w "%{time_total}\n" -o /dev/null -X POST http://localhost:5001/api/v1/example \
            -H "Content-Type: application/json" \
            -d "{\"name\":\"Test Example $i\",\"type\":\"TestType\"}"
        done | awk '{sum+=$1} END {print "Average response time:", sum/NR "s"}'
        
    - name: Generate performance report
      run: |
        echo "API performance testing completed"
        # Add performance analysis commands here

  database-performance:
    name: Database Performance Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
      
    - name: Run database performance tests
      run: |
        # Test database operations performance
        npm run test:db-performance || echo "Database performance tests not configured"
        
    - name: Generate database performance report
      run: |
        echo "Database performance testing completed"
        # Add database performance analysis commands here 